import sys, runpy from pathlib import Path class FakeResponse: def __init__(self, status=200, url="https://example.com/ok"): self.status = status self._url = url def geturl(self): return self._url def __enter__(self): return self def __exit__(self, *a): return False def read(self, *a, **k): return b"" def test_internal_and_external_links(sandbox_repo, monkeypatch, tmp_path): # Prepare an external URL mock import urllib.request as ur def fake_urlopen(req, timeout=10): # Simulate 200 OK return FakeResponse(200, "https://example.com/ok") monkeypatch.setattr(ur, "urlopen", fake_urlopen) script = sandbox_repo / "tools" / "check_links.py" out = tmp_path / "links.txt" argv = sys.argv sys.argv = ["check_links.py", "--root", str(sandbox_repo), "--glob", "canonized/**/*.md", "--format", "text", "--report", str(out), "--timeout", "2"] try: runpy.run_path(str(script), run_name="__main__") finally: sys.argv = argv txt = out.read_text(encoding="utf-8") assert "ERROR" not in txt # internal anchor should be ok for entry_valid.md def test_missing_anchor_detected(sandbox_repo, monkeypatch, tmp_path): # Disable network by making urlopen raise if called import urllib.request as ur def raise_urlopen(req, timeout=10): raise RuntimeError("network disabled") monkeypatch.setattr(ur, "urlopen", raise_urlopen) script = sandbox_repo / "tools" / "check_links.py" out = tmp_path / "links_bad.txt" argv = sys.argv sys.argv = ["check_links.py", "--root", str(sandbox_repo), "--glob", "canonized/**/entry_bad_anchor.md", "--format", "text", "--report", str(out)] try: runpy.run_path(str(script), run_name="__main__") finally: sys.argv = argv txt = out.read_text(encoding="utf-8") assert "missing_anchor" in txt